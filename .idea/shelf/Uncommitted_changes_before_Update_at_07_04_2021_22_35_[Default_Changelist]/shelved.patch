Index: Урок 2. Практическое задание/task_4.py
===================================================================
diff --git a/Урок 2. Практическое задание/task_4.py b/Урок 2. Практическое задание/task_4.py
deleted file mode 100644
--- a/Урок 2. Практическое задание/task_4.py	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
+++ /dev/null	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
@@ -1,31 +0,0 @@
-"""
-4.	Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
-Количество элементов (n) вводится с клавиатуры.
-
-Пример:
-Введите количество элементов: 3
-Количество элементов: 3, их сумма: 0.75
-
-Решите через рекурсию. Решение через цикл не принимается.
-Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
-
-Подсказка:
-Каждый очередной элемент в 2 раза меньше предыдущего и имеет противоположный знак
-"""
-obj = [1]
-
-
-def recurcion(n):
-    if n == 1:
-        print(f'Сумма элементов равна {sum(obj)}')
-    else:
-        if n % 2 == 0:
-            obj.append(obj[-1] / -2)
-            recurcion(n - 1)
-        else:
-            obj.append(obj[-1] / -2)
-            recurcion(n - 1)
-
-
-number = int(input('Введите число: '))
-recurcion(number)
Index: Урок 2. Практическое задание/task_2.py
===================================================================
diff --git a/Урок 2. Практическое задание/task_2.py b/Урок 2. Практическое задание/task_2.py
deleted file mode 100644
--- a/Урок 2. Практическое задание/task_2.py	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
+++ /dev/null	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
@@ -1,30 +0,0 @@
-"""
-2.	Посчитать четные и нечетные цифры введенного натурального числа.
-Например, если введено число 34560, то у него 3 четные цифры
-(4, 6 и 0) и 2 нечетные (3 и 5).
-
-Подсказка:
-На каждом шаге вам нужно 'доставать' из числа очередную цифру
-и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
-Пока все числа не извлечены рекурсивные вызовы продолжаем
-Условие завершения рекурсии - все числа извлечены
-
-Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
-
-Решите через рекурсию. Решение через цикл не принимается.
-Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
-
-Пример:
-Введите число: 123
-Количество четных и нечетных цифр в числе равно: (1, 2)
-"""
-
-
-def func(n):
-    if n // 10 == 0:
-        return n % 2
-    return n % 2 + func(n // 10)
-
-
-number = int(input('Введите число: '))
-print(f'Количество четных цифр {len(str(number)) - func(number)}, нечетных цифр {func(number)} в числе {number}')
Index: Урок 2. Практическое задание/task_5.py
===================================================================
diff --git a/Урок 2. Практическое задание/task_5.py b/Урок 2. Практическое задание/task_5.py
deleted file mode 100644
--- a/Урок 2. Практическое задание/task_5.py	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
+++ /dev/null	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
@@ -1,40 +0,0 @@
-"""
-5.	Вывести на экран коды и символы таблицы ASCII, начиная с символа
-под номером 32 и заканчивая 127-м включительно.
-Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
-
-Пример:
-32 -   33 - ! 34 - " 35 - # 36 - $ 37 - % 38 - & 39 - ' 40 - ( 41 - )
-42 - * 43 - + 44 - , 45 - - 46 - . 47 - / 48 - 0 49 - 1 50 - 2 51 - 3
-52 - 4 53 - 5 54 - 6 55 - 7 56 - 8 57 - 9 58 - : 59 - ; 60 - < 61 - =
-62 - > 63 - ? 64 - @ 65 - A 66 - B 67 - C 68 - D 69 - E 70 - F 71 - G
-72 - H 73 - I 74 - J 75 - K 76 - L 77 - M 78 - N 79 - O 80 - P 81 - Q
-82 - R 83 - S 84 - T 85 - U 86 - V 87 - W 88 - X 89 - Y 90 - Z 91 - [
-92 - \ 93 - ] 94 - ^ 95 - _ 96 - ` 97 - a 98 - b 99 - c 100 - d 101 - e
-102 - f 103 - g 104 - h 105 - i 106 - j 107 - k 108 - l 109 - m 110 - n 111 - o
-112 - p 113 - q 114 - r 115 - s 116 - t 117 - u 118 - v 119 - w 120 - x 121 - y
-122 - z 123 - { 124 - | 125 - } 126 - ~ 127 - 
-
-Решите через рекурсию. Решение через цикл не принимается.
-Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
-
-Подсказка:
-Допускается исп-е встроенных ф-ций
-и допускается комб-е - цикл и рекурсия
-"""
-
-
-def recursion(d1, d2, string='', count=1):
-    if d1 == d2:
-        string = string + f'{d2} - {chr(d2)}'
-        print(string)
-    else:
-        if count % 10 == 0:
-            string = string + f'{d1} - {chr(d1)} \n'
-            recursion(d1 + 1, d2, string, count + 1)
-        else:
-            string = string + f'{d1} - {chr(d1)}'
-            recursion(d1 + 1, d2, string, count + 1)
-
-
-recursion(32, 127)
Index: Урок 2. Практическое задание/task_6.py
===================================================================
diff --git a/Урок 2. Практическое задание/task_6.py b/Урок 2. Практическое задание/task_6.py
deleted file mode 100644
--- a/Урок 2. Практическое задание/task_6.py	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
+++ /dev/null	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
@@ -1,37 +0,0 @@
-"""
-6.	В программе генерируется случайное целое число от 0 до 100.
-Пользователь должен его отгадать не более чем за 10 попыток. После каждой
-неудачной попытки должно сообщаться больше или меньше введенное пользователем
-число, чем то, что загадано. Если за 10 попыток число не отгадано,
-то вывести загаданное число.
-
-Решите через рекурсию. Решение через цикл не принимается.
-Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
-
-Подсказка:
-Базовый случай здесь - угадали число или закончились попытки
-"""
-
-import random
-
-
-def recursion(n, tmp=0):
-    if tmp < 10:
-        print(f'Осталось {10 - tmp} попыток')
-        inp = int(input('Введи число: '))
-        if n == inp:
-            print(f'УРА!!! Ты победил, угадал с {tmp} попытки!!!')
-        if n > inp:
-            print(f'Не правильно, число больше')
-            recursion(n, tmp + 1)
-        if n < inp:
-            print(f'Не правильно, число меньше')
-            recursion(n, tmp + 1)
-    else:
-        print(f'Ты проиграл, осталось 0 попыток, правильное число {n}')
-
-
-digitalrandom = random.randint(0, 100)
-print('Привет, давай играть, я загадал число от 0 до 100, у тебя 10 попыток!')
-
-recursion(digitalrandom)
Index: Урок 2. Практическое задание/task_7.py
===================================================================
diff --git a/Урок 2. Практическое задание/task_7.py b/Урок 2. Практическое задание/task_7.py
deleted file mode 100644
--- a/Урок 2. Практическое задание/task_7.py	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
+++ /dev/null	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
@@ -1,30 +0,0 @@
-"""
-7.	Напишите программу, доказывающую или проверяющую, что для множества
-натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
-где n - любое натуральное число.
-Рекурсия вам нужна для решения левой части выражения.
-Полученный результат нужно просто сравнить с результатом в правой.
-
-Пример:
-для n = 5
-1+2+3+4+5 = 5(5+1)/2
-
-Подсказка:
-В ф-цию принимаются два элемент - это левая и правая части
-
-Решите через рекурсию. Решение через цикл не принимается.
-Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
-"""
-
-
-def func(n, i = 0, left = 0):
-    if n == 0:
-        return 'Равенство выполнется'
-    left += i + 1
-    if left != (i + 1) * (i + 2) // 2:
-        return 'Равенство не выполнется'
-    return func(n - 1, i + 1, left)
-
-
-number = int(input('Введите число: '))
-print(func(number))
Index: Урок 2. Практическое задание/task_1.py
===================================================================
diff --git a/Урок 2. Практическое задание/task_1.py b/Урок 2. Практическое задание/task_1.py
deleted file mode 100644
--- a/Урок 2. Практическое задание/task_1.py	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
+++ /dev/null	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
@@ -1,49 +0,0 @@
-"""
-1.	Написать программу, которая будет складывать, вычитать, умножать или делить
-два числа. Числа и знак операции вводятся пользователем. После выполнения
-вычисления программа не должна завершаться, а должна запрашивать новые данные
-для вычислений. Завершение программы должно выполняться при вводе символа '0'
-в качестве знака операции. Если пользователь вводит неверный знак
-(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
-снова запрашивать знак операции.
-
-Также сообщать пользователю о невозможности деления на ноль,
-если он ввел 0 в качестве делителя.
-
-Подсказка:
-Вариант исполнения:
-- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
-- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
-
-Решите через рекурсию. Решение через цикл не принимается.
-Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
-
-Пример:
-Введите операцию (+, -, *, / или 0 для выхода): +
-Введите первое число: 214
-Введите второе число: 234
-Ваш результат 448
-Введите операцию (+, -, *, / или 0 для выхода): -
-Введите первое число: вп
-Вы вместо трехзначного числа ввели строку (((. Исправьтесь
-Введите операцию (+, -, *, / или 0 для выхода):
-"""
-
-
-def calc():
-    operation = input('Введите операцию (или 0 для выхода): ')
-    if operation == '0':
-        return
-    if operation not in ('+', '-', '*', '/'):
-        print('Я не знаю такой операцию! Попробуйте "+", "-", "*", "/"')
-        return calc()
-    try:
-        a = float(input('Введите первое число: '))
-        b = float(input('Введите второе число: '))
-        print('Результат:', a + b if operation == '+' else a - b if operation == '-' else a * b if operation == '*' else a / b)
-    except ValueError:
-        print('Вы ввели строку, которую невозможно преоброзовать в число')
-    return calc()
-
-
-calc()
Index: Урок 2. Практическое задание/task_3.py
===================================================================
diff --git a/Урок 2. Практическое задание/task_3.py b/Урок 2. Практическое задание/task_3.py
deleted file mode 100644
--- a/Урок 2. Практическое задание/task_3.py	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
+++ /dev/null	(revision fe4afeb9f9fe7943a54c30b84a6caa15797977e0)
@@ -1,34 +0,0 @@
-"""
-3.	Сформировать из введенного числа обратное по порядку входящих в него
-цифр и вывести на экран. Например, если введено число 3486,
- то надо вывести число 6843.
-
-Подсказка:
-На каждом шаге вам нужно 'доставать' из числа очередную цифру
-Пока все числа не извлечены рекурсивные вызовы продолжаем
-Условие завершения рекурсии - все цифры извлечены
-
-Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
-
-Решите через рекурсию. Решение через цикл не принимается.
-Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
-
-Пример:
-Введите число, которое требуется перевернуть: 123
-Перевернутое число: 321
-
-Не забудьте проверить и на числах, заканчивающихся нулем.
-Пример:
-Введите число, которое требуется перевернуть: 1230
-Перевернутое число: 0321
-"""
-
-
-def roll(n):
-    if len(n) == 1:
-        return n
-    return roll(n[1:]) + n[0]
-
-
-number = input('Введите число: ')
-print(f'В обратном порядке: {roll(number)}')
