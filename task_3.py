"""
Задача 3.
В соответствии с документацией Python,
deque – это обобщение стеков и очередей.
Вот основное правило: если вам нужно что-то быстро дописать или вытащить, используйте deque.
Если вам нужен быстрый случайный доступ, используйте list.
Задача: создайте простой список (list) и очередь (deque).
Выполните различные операции с каждым из объектов.
Сделайте замеры и оцените, насколько информация в документации
соответствует дейстивтельности.
Операции равные по семантике (по смыслу)
Но разные по используемым ф-циям
И добавить аналитику, так ли это или нет.!
"""
import timeit
from collections import deque

lst = list()
dq = deque()

print('Вставляем в конец списка:', timeit.timeit('lst.append(0)', setup='from __main__ import lst', number=10**6))

print('\nВставляем в начало списка:', timeit.timeit('lst.insert(0, 1)', setup='from __main__ import lst', number=1000))

print('\nВставляем в конец двусторонней очереди:', timeit.timeit('dq.append(0)', setup='from __main__ import dq',
                                                                 number=10**6))

print('\nВставляем в начало двусторонней очереди:', timeit.timeit('dq.appendleft(1)', setup='from __main__ import dq',
                                                                  number=1000))

print('\nЗабиарем из конца списка:', timeit.timeit('lst.pop()', setup='from __main__ import lst'))

lst.pop()
lst = [0 for _ in range(10**6)]

print('\nЗабираем из начала списка:', timeit.timeit('lst.pop(0)', setup='from __main__ import lst', number=1000))

print('\nЗабираем из конца двусторонней очереди:', timeit.timeit('dq.pop()', setup='from __main__ import dq'))

dq.pop()
dq = deque([0 for _ in range(10**6)])

print('\nЗабираем из начала двусторонней очереди:', timeit.timeit('dq.popleft()', setup='from __main__ import dq',
                                                                  number=1000))

print('\nСлучайный доступ к элементам списка:', timeit.timeit('lst[randint(0, 10**5)]', setup='''
from __main__ import lst
from random import randint'''))

print('\nСлучайный доступ к элементам двусторонней очереди:', timeit.timeit('dq[randint(0, 10**5)]', setup='''
from __main__ import dq
from random import randint'''))

"""
Вставляем в конец списка: 0.06575120000000001

Вставляем в начало списка: 0.8517768

Вставляем в конец двусторонней очереди: 0.05458099999999999

Вставляем в начало двусторонней очереди: 5.189999999999362e-05

Забиарем из конца списка: 0.051844300000000065

Забираем из начала списка: 0.5049866999999999

Забираем из конца двусторонней очереди: 0.03706790000000004

Забираем из начала двусторонней очереди: 3.7899999999924106e-05

Случайный доступ к элементам списка: 0.7592680999999999

Случайный доступ к элементам двусторонней очереди: 4.2369513
"""

# Документации соответствует действительности.
# Операции по вставке в конец/или удаление в списоке и двусторонней очереди выполняются примерно за равное время, но
# однако двусторонняя очередь всё же быстрее.
# Операции вставки в начало/или удаление из начала выполняется быстрей в двусторонней очереди по сравнению со списком
# Время выполнения операций в списке имеет большую зависимость от длины списка, # при попытке вставить в начало или
# конец приходиться полностью пересобрать список.
# Двусторонняя очередь проигрывает списку по скорости в несколько раз, при операциях доступа к элементам.
