"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""
from time import time
size = 30**4  # Размер создаваемых списков и словарей


def timer(func):
    def call_func(*args):
        start_time = time()
        result = func(*args)
        print(f'Функция выполнялась: {round(time() - start_time, 4)} секунд')
        return result
    return call_func


@timer
def fill_lst(n):
    return [i for i in range(n)]


@timer
def fill_dict(n):
    return {i: i for i in range(n)}


print('Вызов заполнения списка')
fill_lst(size)
print(f'\nВызов заполнения словаря')
test_dict = fill_dict(size)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')

# Заполнение словаря медленнее заполнения списка, время уходит на генерации хэшей.


@timer
def fill_links_lst(n):
    return [(i, i) for i in range(n)]


print(f'\nВызов заполнения списка со связями двух значений')
test_lst = fill_links_lst(size)
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')

# При попытке связать какие-либо два значения в списке, мы используем кортежи, это быстрей


@timer
def check_search_lst(lst, el):
    for i in range(len(lst)):
        if lst[i][0] == el:
            return lst[i][1]


@timer
def check_search_dict(d, el):
    return d[el]


print('Вызов поиска в списке')
check_search_lst(test_lst, 809714)
print('Вызов поиска в словаре')
check_search_dict(test_dict, 809714)

# обходим весь список в поиске ключа - O(N)
# ищем по ключу в  словаре - O(1)
